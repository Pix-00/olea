import json
from functools import wraps
from typing import Dict

import requests

MAILGUN_BASE_ENDPOINT = 'https://api.mailgun.net'


def handle_error(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        r = f(*args, **kwargs)
        if not r.ok:
            raise Exception(json.dumps(r.args))

        if 'application/json' in r.headers.get('content-type', '').split(';'):
            return r.json()

        return r

    return decorated


def _build_message(subject: str, to: str, template: str, values: Dict[str, str]):
    data = {f'v:{k}': v for k, v in values.items()}

    data['to'] = to
    data['subject'] = subject
    data['template'] = template

    return data


class MailGunAPI():
    def __init__(self, config):
        self.domain = config['MAILGUN_DOMAIN']
        self.endpoint = config.get('MAILGUN_BASE_ENDPOINT', MAILGUN_BASE_ENDPOINT)

        self.send_from = f'{config["MAILGUN_SENDER_NAME"]} <no-reply@{self.domain}>'
        self.auth = ('api', config['MAILGUN_API_KEY'])

    @handle_error
    def send(self, subject, to, template, values):
        maildata = _build_message(subject, to, template, values)
        maildata['from'] = self.send_from
        r = requests.post(url=f'{self.endpoint}/v3/{self.domain}/messages',
                          auth=self.auth,
                          data=maildata)
        return r

    @handle_error
    def check_adr(self, address: str):
        r = requests.get(url=f'{self.endpoint}/v4/address/validate',
                         auth=self.auth,
                         params={'address': address})
        return r
