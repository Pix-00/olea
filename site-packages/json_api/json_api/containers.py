from functools import cached_property
from typing import List

from jsonschema import Draft7Validator

from .fields import BaseField


class ContainerMeta(type):
    def __new__(cls, name, bases, attrs):
        if name == "Container":
            return type.__new__(cls, name, bases, attrs)

        fields = dict()
        for name, obj in attrs.items():
            if isinstance(obj, type) \
                and (issubclass(obj, BaseField) or isinstance(obj, ContainerMeta)):
                fields[name] = obj()
            elif isinstance(obj, BaseField) or isinstance(obj, Container):
                fields[name] = obj

        for name in fields.keys():
            attrs.pop(name)

        attrs['__fields__'] = fields

        return type.__new__(cls, name, bases, attrs)


class Container(metaclass=ContainerMeta):
    _condition = None

    def __init__(self, required=True, condition=None):
        self._required = required
        if condition:
            self._condition = condition
        self._data = dict()
        self.errors = dict()

    def __getattr__(self, key):
        return self._data[key]

    def __get_item__(self, key):
        return self.__getattr__(key)

    def schema(self):
        result = {'type': 'object', 'properties': dict(), 'required': list()}
        for name, field in self.__fields__.items():
            if field._required:
                result['required'].append(name)
            result['properties'][name] = field.schema()
        if not result['required']:
            result.pop('required')
        result['additionalProperties'] = False
        return result

    def wrap_data(self, data, errors=None):
        for name, field in self.__fields__.items():
            try:
                self._data[name] = field.wrap_data(data[name], errors=errors.get(name, None))
            except KeyError:
                self._data[name] = field.set_default()

        return self

    def extra_validation(self):
        result = dict()
        for name, obj in self.fields.keys():
            if isinstance(obj, Container):
                self.errors.update({name: obj.extra_validation()})

            else:
                if not (validator := getattr(self, f'check_{name}')):
                    continue

                if msg := validator(self._data[name]):
                    result[name] = msg

    def process_input(self, data):
        print(self.schema())
        v = Draft7Validator(self.schema())
        for e in v.iter_errors(data):
            head = self.errors
            for i, path in enumerate(e.absolute_path, 1):
                if i == len(e.absolute_path):
                    break
                head.setdefault(path, dict())
                head = head[path]
            head[path] = e.message
        self.wrap_data(data, errors)
        self.errors.update(self.extra_validation())
